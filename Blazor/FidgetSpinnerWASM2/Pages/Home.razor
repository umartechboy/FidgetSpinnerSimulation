@page "/"
@using FidgetSpinnerWASM2.Models
@using FidgetSpinnerWASM2.Pages.LivePlots
@using SkiaSharp
@using SkiaSharp.Views
@using System.Numerics
@using System.Runtime.Serialization.Json
@using System.Text

@inject IJSRuntime JSRuntime

<MudGrid>
    <MudItem md="7">
        <MudPaper Elevation="3">
        <div style="width: 100%; height: 100vh;"
        @onmousemove="mouseMove">
            <SkiaSharp.Views.Blazor.SKGLView @ref="skView"
            OnPaintSurface="OnPaint"
            IgnorePixelScaling="true" style="width: 100%; height: 100%;"></SkiaSharp.Views.Blazor.SKGLView>
                </div>
        </MudPaper>
    </MudItem>
    <MudItem md="5" Style="height: 100vh">
        <MudStack>
            <SimulationControl sim="sim" OpenSettings="()=> settingsVisible = true"></SimulationControl>
            <WorkspaceOverView sim="sim" NewConfig="NewConfig" EditSpinner="EditSpinner"></WorkspaceOverView>
            <AnalysisPreview @ref="analysis" sim="sim"></AnalysisPreview>
        </MudStack>
    </MudItem>
</MudGrid>

<SpinnerEditor @bind-spinnerEditorVisible="spinnerEditorVisible" spinnerToEdit="spinnerToEdit" spinners="spinners" SpinnerRemoved="() => spinnerToEdit = null"></SpinnerEditor>
<SimSettings @bind-settingsVisible="settingsVisible" @bind-realTimeSim="realTimeSim" @bind-showLabels="showLabels"  sim="sim"></SimSettings>

@code{
    Spinner spinnerToEdit = null;
    AnalysisPreview analysis;
    bool spinnerEditorVisible = false;
    public Models.Spinner selectedSpinner;
    public Simulation sim = new Simulation();
    List<Models.Spinner> spinners { get => sim.spinners; }
    SkiaSharp.Views.Blazor.SKGLView skView;
    bool realTimeSim = false;
    bool showLabels = false;
    bool settingsVisible = false;
    void updateUI()
    {
        StateHasChanged();

        // update plot too

    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender){
            float centerToCenter_mm = 100;
            spinners.AddRange(new Models.Spinner[]{
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 0, 0, 0), new bool [] {true, false, true, false}),
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 1, 0, 0) / 1000, new bool [] {true, false, true, false}),
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 2, 0, 0) / 1000, new bool [] {true, false, true, false}),
    });

            spinners[0].IsPowered = true;
            spinners[0].w = 2;
            foreach(var spinner in spinners)
                spinner.OnRequestToDraw += (s, e) => skView.Invalidate();
            new Task(async () => { await Task.Delay(2000); updateUI(); }).Start();
            sim.OnRequestToDraw += (s, e) => { skView.Invalidate(); analysis.Invalidate(); };
            sim.OnRequestToUpdateState += (s, e) => updateUI();

            new Task(async () =>
            {
                await Task.Delay(1000);
                while (true)
                {
                    skView.Invalidate();
                    analysis.Invalidate();
                    await Task.Delay(20);
                }
            }).Start();

        }
    }
    void EditSpinner(Spinner spinner)
    {
        spinnerToEdit = spinner; 
        spinnerEditorVisible = true; 
    }
    void NewConfig()
    {
        analysis.clear();
        analysis.updateCurrentPlot();
    }
    public void mouseMove(MouseEventArgs e)
    {
        skView.Invalidate();
    }
    DateTime lastPaint = DateTime.Now;
    public void OnPaint(SkiaSharp.Views.Blazor.SKPaintGLSurfaceEventArgs e)
    {
        if (sim.canStep)
        {
            var toSim = (DateTime.Now - lastPaint).TotalMilliseconds;
            lastPaint = DateTime.Now;
            if (toSim > (realTimeSim ? 1000:10))
                toSim = realTimeSim ? 1000 : 10;
            var start = sim.t;
            while(sim.t - start < toSim / 1000.0D)
                sim.Step();
            updateUI();
        }
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        canvas.ResetMatrix();
        canvas.Translate(e.Info.Width / 2, e.Info.Height / 2);
        canvas.Scale(e.Info.Width, -e.Info.Width); // width is 1 meter, origin is bottom left, normal

        spinners.ForEach((s) => s.Draw(canvas, showLabels));
        skView.Invalidate();
        analysis.Invalidate();
    }
}