@page "/"
@using FidgetSpinnerWASM2.Models
@using FidgetSpinnerWASM2.Pages.LivePlots
@using SkiaSharp
@using SkiaSharp.Views
@using System.Numerics
@using System.Runtime.Serialization.Json
@using System.Text
@inject IJSRuntime JSRuntime

<MudGrid>
    <MudItem md="7">
        <MudPaper Elevation="3">
        <div style="width: 100%; height: 100vh;"
        @onmousemove="mouseMove">
            <SkiaSharp.Views.Blazor.SKGLView @ref="skView"
            OnPaintSurface="OnPaint"
            IgnorePixelScaling="true" style="width: 100%; height: 100%;"
            ></SkiaSharp.Views.Blazor.SKGLView>
                </div>
        </MudPaper>
    </MudItem>
    <MudItem md="5" Style="height: 100vh">
        <MudGrid>
            <MudItem md="12">
                <MudPaper Elevation="5" Class="pa-4">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h6" Class="px-4">Simulation Control</MudText>
                        <MudText>Time: @sim.t.ToString("F4")</MudText>

                        <MudButtonGroup>
                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" OnClick="sim.Play"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Pause" OnClick="sim.Pause"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="() => settingsVisible = true"></MudIconButton>
                        </MudButtonGroup>

                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem md="12">
                <MudPaper Elevation="5">
                    <MudNavMenu>
                        <MudGrid Class="px-4 my-2">
                            <MudItem md="10">
                                <MudText Typo="Typo.h6" Class="px-4">Bodies Config</MudText>
                            </MudItem>
                            <MudItem md="1">
                                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveConfig"></MudIconButton>
                            </MudItem>
                            <MudItem md="1">
                                <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="UploadConfig">
                                    <ActivatorContent>
                                        <MudIconButton
                                                   Color="Color.Primary"
                                                   Icon="@Icons.Material.Filled.CloudUpload">
                                        </MudIconButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudItem>
                        </MudGrid>                        
                        
                        @if (spinners.Count == 0)
                        {
                            <MudNavLink Disabled="true">No spinners added</MudNavLink>
                        }
                        @foreach (var spinner in spinners)
                        {
                            <MudNavLink Icon="@Icons.Material.Filled.Settings" IconColor="Color.Warning" OnClick="() => {spinnerToEdit = spinner; spinnerEditorVisible = true; }">
                                @("Spinner " + (spinner.ID))
                            </MudNavLink>
                        }
                        <MudNavLink Icon="@Icons.Material.Filled.AddBox" IconColor="MudBlazor.Color.Success" OnClick="AddSpinner">
                            Add Spinner
                        </MudNavLink>
                    </MudNavMenu>
                </MudPaper>
            </MudItem>
            <MudItem md="12">
                <MudPaper Elevation="5" Class="px-4 py-5">
                    <MudGrid>
                        <MudItem md="8">
                            <MudSelect T="AnalysisItem" Label="Plot" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="(item) => updatePlot(item)">
                                <MudSelectItem Value="@(new AnalysisItem("Acceleration",sim.times, sim.spinners.Select(sp => sp.SimResult.accelerations).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Angular Speed",sim.times, sim.spinners.Select(sp => sp.SimResult.velocities).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Displacement",sim.times, sim.spinners.Select(sp => sp.SimResult.displacements).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Magnetic Torque",sim.times, sim.spinners.Select(sp => sp.SimResult.torques).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Frictional Torque",sim.times, sim.spinners.Select(sp => sp.SimResult.frictions).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Net Torque",sim.times, sim.spinners.Select(sp => sp.SimResult.netTorques).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                                <MudSelectItem Value="@(new AnalysisItem("Kinetic Energy", sim.times, sim.spinners.Select(sp => sp.SimResult.kineticEnergy).ToArray(), sim.spinners.Select(sp => "Spinner " + sp.ID).ToArray()))" />
                            </MudSelect>
                        </MudItem>
                        <MudItem md="2">
                            <MudButton EndIcon="@Icons.Material.Filled.Refresh" FullWidth="true" Style="height: 100%" OnClick="updateCurrentPlot"></MudButton>
                        </MudItem>
                        <MudItem md="2">
                            <MudButton EndIcon="@Icons.Material.Filled.Save" FullWidth="true" Style="height: 100%" OnClick="saveCurrentPlot"></MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudItem Class="py-2">
                        <PhysLoggerChart @ref="plotter"></PhysLoggerChart>
                    </MudItem>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@* Spinner Editor *@
<MudDrawer @bind-Open="spinnerEditorVisible" Width="40vw" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">My App</MudText>
    </MudDrawerHeader>
    @if (spinnerToEdit == null)
    {
        <MudText Typo="Typo.h3" Color="Color.Error">Error: No spinner selected for editing</MudText>
    }
    else
    {
        <MudGrid Class="px-4">
            <MudItem md="12">
                <MudText Typo="Typo.h4">Spinner</MudText>
                <MudItem>
                    <MudSlider T="float" Value="@spinnerToEdit.Rmm" ValueChanged="(v) => spinnerToEdit.Rmm = v" Min="1" Max="500" Step="0.5F">Radius (mm) = @spinnerToEdit.Rmm</MudSlider>
                </MudItem>
                <MudItem>
                    <MudSlider T="float" Value="@spinnerToEdit.Xmm" ValueChanged="(v) => spinnerToEdit.Xmm = v" Min="-500" Max="500" Step="0.5F">Center X (mm) = @spinnerToEdit.Xmm</MudSlider>
                </MudItem>
                <MudItem>
                    <MudSlider T="float" Value="@spinnerToEdit.Ymm" ValueChanged="(v) => spinnerToEdit.Ymm = v" Min="-500" Max="500" Step="0.5F">Center Y (mm) = @spinnerToEdit.Ymm</MudSlider>
                </MudItem>
                <MudItem>
                    <MudCheckBox T="bool" Value="@spinnerToEdit.IsPowered" ValueChanged="(v) => spinnerToEdit.IsPowered = v" Label="Constant Speed"></MudCheckBox>
                </MudItem>
                <MudItem>
                    <MudSlider T="float" Value="@spinnerToEdit.RPM" ValueChanged="(v) => spinnerToEdit.RPM = v" Min="-1000" Max="1000" Step="1.0F">Fixed Speed (rpm) = @(spinnerToEdit.RPM)</MudSlider>
                </MudItem>
                <MudItem>
                    <MudSlider T="float" Value="@spinnerToEdit.BNmms" ValueChanged="(v) => spinnerToEdit.BNmms = v" Min="0" Max="5" Step="0.001F">Friction (N.mm.s) = @spinnerToEdit.BNmms</MudSlider>
                </MudItem>
                <MudItem>
                    <MudButton StartIcon="@Icons.Material.Filled.Remove" Color="MudBlazor.Color.Error" OnClick="() => { spinners.Remove(spinnerToEdit); spinnerToEdit = null; spinnerEditorVisible = false; }">Remove this spinner</MudButton>
                </MudItem>
            </MudItem>
            <MudItem md="12">

                <MudText Typo="Typo.h4">Magnets</MudText>

                @if (spinnerToEdit.Magnets.Count == 0)
                {
                    <MudNavLink Disabled="true">No Magnets added</MudNavLink>
                }
                <MudDynamicTabs AddTab="() => {AddNewMagnet(spinnerToEdit); StateHasChanged(); }" CloseTab="(panel) => removeMagnet((Guid)panel.ID)" AddIconToolTip="Add Magnet">
                    @foreach (var magnet in spinnerToEdit.Magnets)
                    {
                        <MudTabPanel ID="magnet.Id" Text="@("Magnet " + (spinnerToEdit.Magnets.IndexOf(magnet) + 1))" ShowCloseIcon="true" @onclose="() => {spinnerToEdit.RemoveMagnet(magnet);}">

                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudCheckBox T="bool" Value="@magnet.Polarity" ValueChanged="(v) => magnet.Polarity = v" Label="North is Up"></MudCheckBox>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.Polarity = magnet.Polarity)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.Polarity = magnet.Polarity))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>

                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudSlider T="float" Value="@magnet.Rmm" ValueChanged="(v) => magnet.Rmm = v" Min="1" Max="50">Radius (mm) = @magnet.Rmm</MudSlider>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.Rmm = magnet.Rmm)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.Rmm = magnet.Rmm))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>

                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudSlider T="float" Value="@magnet.Rmm" ValueChanged="(v) => magnet.Rmm = v" Min="1" Max="50">Radius (mm) = @magnet.Rmm</MudSlider>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.Rmm = magnet.Rmm)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.Rmm = magnet.Rmm))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudSlider T="float" Value="@magnet.Hmm" ValueChanged="(v) => magnet.Hmm = v" Min="1" Max="50">Height (mm) = @magnet.Hmm</MudSlider>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.Hmm = magnet.Hmm)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.Hmm = magnet.Hmm))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudSlider T="float" Value="@magnet.moment" ValueChanged="(v) => magnet.moment = v" Min="0" Max="50.0F" Step="0.1F">Dipole moment (A/m^2) = @magnet.moment</MudSlider>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.moment = magnet.moment)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.moment = magnet.moment))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudSlider T="float" Value="@magnet.Massg" ValueChanged="(v) => magnet.Massg = v" Min="1" Max="200">Mass (g) = @magnet.Massg</MudSlider>

                                <MudStack Row Justify="Justify.FlexEnd">
                                    <MudTooltip Text="Apply to other magnets in this spinners">
                                        <MudIconButton OnClick="() => spinnerToEdit.Magnets.ForEach(m => m.Massg = magnet.Massg)" Icon="@Icons.Material.Filled.AutoFixNormal"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Apply to all the spinners">
                                        <MudIconButton OnClick="() => spinners.ForEach(s => s.Magnets.ForEach(m => m.Massg = magnet.Massg))" Icon="@Icons.Material.Filled.AutoFixHigh"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>
                            <MudButton StartIcon="@Icons.Material.Filled.Remove" Color="MudBlazor.Color.Error" OnClick="() => { spinnerToEdit.RemoveMagnet(magnet); StateHasChanged(); }">Remove this magnet</MudButton>
                        </MudTabPanel>
                    }
                </MudDynamicTabs>
            </MudItem>
        </MudGrid>

    }
</MudDrawer>

@* Settings *@
<MudDialog @bind-Visible="settingsVisible" Options="@(new() { FullWidth = true })">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Simulation Settings
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem md="12">
                <MudCheckBox @bind-Value="realTimeSim" Label="Real time update"></MudCheckBox>
                <MudCheckBox @bind-Value="showLabels" Label="Display Labels"></MudCheckBox>
                <MudItem>
                    <MudSlider T="float" Value="@sim.mu" ValueChanged="(v) => sim.mu = v" Min="0" Max="1F" Step="0.00000001F">Permeability of free space (T/A) = @sim.mu</MudSlider>
                </MudItem>
            </MudItem>
            <MudItem md="12">
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => settingsVisible = false" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>
@code{
    Spinner spinnerToEdit = null;
    bool spinnerEditorVisible = false;
    bool settingsVisible = false;
    public Models.Spinner selectedSpinner;
    public Simulation sim = new Simulation();
    List<Models.Spinner> spinners { get => sim.spinners; }
    SkiaSharp.Views.Blazor.SKGLView skView;
    bool realTimeSim = false;
    bool showLabels = false;
    //Plotter plotter; 
    PhysLoggerChart plotter;

    void SaveConfig()
    {
        var jsonSer = new DataContractJsonSerializer(typeof(List<Spinner>));
        var stream = new MemoryStream();
        jsonSer.WriteObject(stream, sim.spinners);
        var data = new UTF8Encoding().GetString(stream.ToArray());
        JSRuntime.InvokeVoidAsync("downloadString", "SimulationConfig.json", data);
    }
    async Task UploadConfig(IBrowserFile file)
    {
        var jsonSer = new DataContractJsonSerializer(typeof(List<Spinner>));
        var str = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();

        var spinners = (List<Spinner>)jsonSer.ReadObject(new MemoryStream(UTF8Encoding.Default.GetBytes(str)));
        if (spinners == null)
            return;
        sim.spinners = spinners;
        foreach (var sp in spinners)
            sp.SimResult = new SpinnerSimResult();
        sim.t = 0;
        sim.canStep = false;
        currentSimResultItem = null;
        updateCurrentPlot();
        StateHasChanged();
    }
    AnalysisItem currentSimResultItem;
    void saveCurrentPlot()
    {
        if (currentSimResultItem == null)
            return;
        var dataToSave = plotter.Plot.XSeries.SaveAgainst(plotter.Plot.YAxis.DataSeries.ToArray());
        JSRuntime.InvokeVoidAsync("downloadString", currentSimResultItem.itemTitle + " data.csv", dataToSave);
    }
    void updateCurrentPlot()
    {
        plotter.clear();
        if (currentSimResultItem == null)
        {
            StateHasChanged();
            return;
        }
        plotter.holdOn();
        for (int i =0; i < currentSimResultItem.ids.Length; i++)
        {
            var id = currentSimResultItem.ids[i];
            var x = currentSimResultItem.X;
            var y = currentSimResultItem.Y[i];
            plotter.plot(x.Select(_v => (float)_v).ToArray(), y.Select(_v => (float)_v).ToArray(), id);
        }
        StateHasChanged();
    }
    void updatePlot(IEnumerable<Models.AnalysisItem> _item)
    {
        currentSimResultItem = _item.ToArray()[0];
        updateCurrentPlot();
    }
    void updateUI()
    {
        StateHasChanged();
        plotter.Invalidate();
        // update plot too

    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender){
            float centerToCenter_mm = 100;
            spinners.AddRange(new Models.Spinner[]{
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 0, 0, 0), new bool [] {true, false, true, false}),
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 1, 0, 0) / 1000, new bool [] {true, false, true, false}),
        new Models.Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 2, 0, 0) / 1000, new bool [] {true, false, true, false}),
    });

            spinners[0].IsPowered = true;
            spinners[0].w = 2;
            foreach(var spinner in spinners)
                spinner.OnRequestToDraw += (s, e) => skView.Invalidate();
            new Task(async () => { await Task.Delay(2000); updateUI(); }).Start();
            sim.OnRequestToDraw += (s, e) => { skView.Invalidate(); plotter.Invalidate(); };
            sim.OnRequestToUpdateState += (s, e) => updateUI();

            new Task(async () =>
            {
                await Task.Delay(1000);
                while (true)
                {
                    skView.Invalidate();
                    plotter.Invalidate();
                    await Task.Delay(20);
                }
            }).Start();

        }
    }
    public void AddSpinner()
    {
        bool breakFinder = false;
        float x = 0, y = 0;
        for (y = 0.0F; y < 0.4; y += 0.1F)
        {
            for (x = -0.4F; x < 0.4; x += 0.1F)
            {
                bool allClear = true;
                foreach (var spinner in spinners)
                {
                    var thisRect = new System.Drawing.RectangleF(x, y, 0.1F, 0.1F);
                    var spinnerRect = new System.Drawing.RectangleF(spinner.Position.X - spinner.R * 1.5F, spinner.Position.Y - spinner.R * 1.5F, spinner.R * 3, spinner.R * 3);
                    if (thisRect.IntersectsWith(spinnerRect) || thisRect.Contains(spinnerRect) || spinnerRect.Contains(thisRect))
                    {
                        allClear = false;
                        break;
                    }
                }
                if (allClear)
                {
                    breakFinder = true;
                    break;
                }
            }
            if (breakFinder)
                break;
        }
        var s = new Models.Spinner(4, 40 / 1000, new Vector3(x, y, 0), new bool[] { true, false, true, false });
        s.OnRequestToDraw += (s, e) =>
        {
            skView.Invalidate(); plotter.Invalidate();
        };

        spinners.Add(s);
        updateUI();
    }
    public void removeMagnet (Guid id)
    {
        var spinner = spinners.Find(s => s.Magnets.Any(m => m.Id == id));
        var magnet = spinner.Magnets.Find(m => m.Id == id);
        spinner.RemoveMagnet(magnet);
        StateHasChanged();
    }
    public void AddNewMagnet (Models.Spinner spinner)
    {
        spinner.AddMagnet(new Magnet());
        updateUI();
    }
    public void mouseMove(MouseEventArgs e)
    {
        skView.Invalidate();
    }
    DateTime lastPaint = DateTime.Now;
    public void OnPaint(SkiaSharp.Views.Blazor.SKPaintGLSurfaceEventArgs e)
    {
        if (sim.canStep)
        {
            var toSim = (DateTime.Now - lastPaint).TotalMilliseconds;
            lastPaint = DateTime.Now;
            if (toSim > (realTimeSim ? 1000:10))
                toSim = realTimeSim ? 1000 : 10;
            var start = sim.t;
            while(sim.t - start < toSim / 1000.0D)
                sim.Step();
            updateUI();
        }
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        canvas.ResetMatrix();
        canvas.Translate(e.Info.Width / 2, e.Info.Height / 2);
        canvas.Scale(e.Info.Width, -e.Info.Width); // width is 1 meter, origin is bottom left, normal

        spinners.ForEach((s) => s.Draw(canvas, showLabels));
        skView.Invalidate();
        plotter.Invalidate();
    }
}