@page "/"
@using FidgetSpinnerWASM2.Models
@using SkiaSharp
@using SkiaSharp.Views
@using System.Numerics

<PageTitle>Home</PageTitle>
<MudGrid>
    <MudItem md="8">
        <MudPaper Elevation="3">
        <div style="width: 100%; height: 100vh;"
        @onmousemove="mouseMove">
            <SkiaSharp.Views.Blazor.SKGLView @ref="skView"
            OnPaintSurface="OnPaint"
            IgnorePixelScaling="true" style="width: 100%; height: 100%;"
            ></SkiaSharp.Views.Blazor.SKGLView>
                </div>
        </MudPaper>
    </MudItem>
    <MudItem md="4" Style="height: 100vh">
        <MudGrid>
            <MudItem md="12">
                <MudPaper Elevation="5" Class="pa-4">
                    <MudText>Simulation control</MudText>
                    <MudText>Time: @sim.t.ToString("F4")</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" OnClick="sim.Play"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Pause" OnClick="sim.Pause"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Stop" OnClick="sim.Reset"></MudIconButton>
                </MudPaper>
            </MudItem>
            <MudItem md="12">
                <MudPaper Elevation="5" Class="pa-4">
                    <MudText>Display</MudText>
                    <MudCheckBox @bind-Value="realTimeSim" Label="Real time update"></MudCheckBox>
                </MudPaper>
            </MudItem>
            <MudItem md="12">
                <MudPaper Elevation="5">
                    <MudNavMenu>
                        <MudText Typo="Typo.h6" Class="px-4">Fidget Spinner Simulator</MudText>
                        @if (spinners.Count == 0)
                        {
                            <MudNavLink Disabled="true">No spinners added</MudNavLink>
                        }
                        @foreach (var spinner in spinners)
                        {
                            <MudNavGroup Title="@("Spinner " + spinner.ID)" Expanded="false">
                                <MudItem Style="padding-left: 48px">
                                    <MudButton Class="mx-6" StartIcon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="() => {spinners.Remove(spinner); StateHasChanged();}">Remove</MudButton>
                                </MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudSlider T="float" Value="@spinner.Rmm" ValueChanged="(v) => spinner.Rmm = v" Min="1" Max="500">Radius (mm) = @spinner.Rmm</MudSlider>
                                </MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudSlider T="float" Value="@spinner.Xmm" ValueChanged="(v) => spinner.Xmm = v" Min="-500" Max="500">Center X (mm) = @spinner.Xmm</MudSlider>
                                </MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudSlider T="float" Value="@spinner.Ymm" ValueChanged="(v) => spinner.Ymm = v" Min="-500" Max="500">Center Y (mm) = @spinner.Ymm</MudSlider></MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudCheckBox T="bool" Value="@spinner.IsPowered" ValueChanged="(v) => spinner.IsPowered = v" Label="Constant Speed"></MudCheckBox>
                                </MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudSlider T="float" Value="@spinner.RPM" ValueChanged="(v) => spinner.RPM = v" Min="-1000" Max="1000">Fixed Speed (rpm) = @(spinner.RPM)</MudSlider>
                                </MudItem>
                                <MudItem Style="padding-left: 48px">
                                    <MudSlider T="float" Value="@spinner.BNmms" ValueChanged="(v) => spinner.BNmms = v" Min="0" Max="5">Friction (N.mm.s) = @spinner.BNmms</MudSlider>
                                </MudItem>
                                <MudNavLink>Magnets</MudNavLink>

                                @if (spinner.Magnets.Count == 0)
                                {
                                    <MudNavLink Disabled="true">No Magnets added</MudNavLink>
                                }
                                @foreach (var magnet in spinner.Magnets)
                                {
                                    <MudNavGroup Title="@("Magnet " + (spinner.Magnets.IndexOf(magnet) + 1))" Expanded="false">
                                        <MudItem Style="padding-left: 96px">
                                            <MudButton StartIcon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="() => { spinner.Magnets.Remove(magnet); StateHasChanged();}">Remove</MudButton>
                                        </MudItem>
                                        <MudItem Style="padding-left: 96px">
                                            <MudCheckBox T="bool" Value="@magnet.Polarity" ValueChanged="(v) => magnet.Polarity = v" Label="North is Up"></MudCheckBox>
                                        </MudItem>
                                        <MudItem Style="padding-left: 96px">
                                            <MudSlider T="float" Value="@magnet.Rmm" ValueChanged="(v) => magnet.Rmm = v" Min="1" Max="50">Radius (mm) = @magnet.Rmm</MudSlider>
                                        </MudItem>
                                        <MudItem Style="padding-left: 96px">
                                            <MudSlider T="float" Value="@magnet.Hmm" ValueChanged="(v) => magnet.Hmm = v" Min="1" Max="50">Height (mm) = @magnet.Hmm</MudSlider>
                                        </MudItem>
                                        <MudItem Style="padding-left: 96px">
                                            <MudSlider T="float" Value="@magnet.Massg" ValueChanged="(v) => magnet.Massg = v" Min="1" Max="200">Mass (g) = @magnet.Massg</MudSlider>
                                        </MudItem>
                                    </MudNavGroup>
                                }
                                <MudItem Style="padding-left: 48px">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="() => AddNewMagnet(spinner)">Add Magnet</MudButton>
                                </MudItem>
                            </MudNavGroup>
                        }
                        <MudItem Style="padding-left: 24">
                            <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddSpinner">Add Spinner</MudButton>
                        </MudItem>
                    </MudNavMenu>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code{
    public Spinner selectedSpinner;
    public Simulation sim = new Simulation();
    List<Spinner> spinners { get => sim.spinners; }
    SkiaSharp.Views.Blazor.SKGLView skView;
    bool realTimeSim = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender){
            float centerToCenter_mm = 100;
            spinners.AddRange(new Spinner[]{
        new Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 0, 0, 0), new bool [] {true, false, true, false}),
        new Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 1, 0, 0) / 1000, new bool [] {true, false, true, false}),
        new Spinner(4, 40 / 1000, new Vector3(centerToCenter_mm * 2, 0, 0) / 1000, new bool [] {true, false, true, false}),
    });

            spinners[0].IsPowered = true;
            spinners[0].w = 2;
            foreach(var spinner in spinners)
                spinner.OnRequestToDraw += (s, e) => skView.Invalidate();
            new Task(async () => { await Task.Delay(2000); StateHasChanged(); }).Start();
            sim.OnRequestToDraw += (s, e) => skView.Invalidate();
            sim.OnRequestToUpdateState += (s, e) => StateHasChanged();

            new Task(async () =>
            {
                await Task.Delay(1000);
                while (true)
                {
                    skView.Invalidate();
                    await Task.Delay(20);
                }
            }).Start();

        }
    }
    public void AddSpinner()
    {
        bool breakFinder = false;
        float x = 0, y = 0;
        for (y = 0.0F; y < 0.4; y += 0.1F)
        {
            for (x = -0.4F; x < 0.4; x += 0.1F)
            {
                bool allClear = true;
                foreach (var spinner in spinners)
                {
                    var thisRect = new System.Drawing.RectangleF(x, y, 0.1F, 0.1F);
                    var spinnerRect = new System.Drawing.RectangleF(spinner.Position.X - spinner.R * 1.5F, spinner.Position.Y - spinner.R * 1.5F, spinner.R * 3, spinner.R * 3);
                    if (thisRect.IntersectsWith(spinnerRect) || thisRect.Contains(spinnerRect) || spinnerRect.Contains(thisRect))
                    {
                        allClear = false;
                        break;
                    }
                }
                if (allClear)
                {
                    breakFinder = true;
                    break;
                }
            }
            if (breakFinder)
                break;
        }
        var s = new Spinner(4, 40 / 1000, new Vector3(x, y, 0), new bool[] { true, false, true, false });
        s.OnRequestToDraw += (s, e) => skView.Invalidate();

        spinners.Add(s);
        StateHasChanged();
    }
    public void AddNewMagnet (Spinner spinner)
    {
        spinner.AddMagnet(new Magnet());
        StateHasChanged();
    }
    public void mouseMove(MouseEventArgs e)
    {
        skView.Invalidate();
    }
    DateTime lastPaint = DateTime.Now;
    public void OnPaint(SkiaSharp.Views.Blazor.SKPaintGLSurfaceEventArgs e)
    {
        if (sim.canStep)
        {
            var toSim = (DateTime.Now - lastPaint).TotalMilliseconds;
            lastPaint = DateTime.Now;
            if (toSim > (realTimeSim ? 1000:10))
                toSim = realTimeSim ? 1000 : 10;
            var start = sim.t;
            while(sim.t - start < toSim / 1000.0D)
                sim.Step();
            StateHasChanged();
        }
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        canvas.ResetMatrix();
        canvas.Translate(e.Info.Width / 2, e.Info.Height / 2);
        canvas.Scale(e.Info.Width, -e.Info.Width); // width is 1 meter, origin is bottom left, normal

        spinners.ForEach((s) => s.Draw(canvas));
        skView.Invalidate();
    }
}